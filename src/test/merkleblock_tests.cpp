// Copyright (c) 2012-2021 The Bitcoin Core developers
// Copyright (c) 2024 The Betgenius Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include <merkleblock.h>
#include <test/util/setup_common.h>
#include <uint256.h>
#include <streams.h>
#include <util/strencodings.h>

#include <boost/test/unit_test.hpp>

#include <set>
#include <vector>

BOOST_AUTO_TEST_SUITE(merkleblock_tests)

/**
 * Create a CMerkleBlock using a list of txids which will be found in the
 * given block.
 */
BOOST_AUTO_TEST_CASE(merkleblock_construct_from_txids_found)
{
    // Random test block (0x414e96f90a60b9dd125f0ef9a04b67f1335e9f8045d1ba1db8b52361f9ec1d89)
    // With 9 txes
    CBlock block;
    DataStream stream{
        ParseHex("00000020ca688cca33b7d47b2feb61cb604a7bc7e2175652a885238b325d252f7106157f2c60e574599c862709c165908c8a6afbbbdfb1653085837095165e1a86f7d9956a163166ffff7f206f00000000000000000000003468c93f1039dbf9d6563b99cc73e507cc7f91fb259416dee74ea423bbaccfef09020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff03016f00ffffffff0208d7ed902e0000001976a9143d43ee6b2e01b439908f07c5715ed0572668aa9088ac0000000000000000266a24aa21a9edd314965bd33edd008d7ed626972346997c8639606093d184e4f94ef392cc26160120000000000000000000000000000000000000000000000000000000000000000000000000020000000166b14613cbeb27f64f417966a736c8e737aab2d408aefafe491945e89ada8f2e000000006a473044022078eec3a2293496b5fe663c9944a032e2ef68d167ef3d02b95b266bf2834da274022043557f40c337276b775d37d6275a5412cbeb0234e054ffa9ce430920766b69c2012103dd447ceed1fbc5ba778b74171d990883857af70982a51405b1cb1ab63ed0831bfdffffff0200e40b54020000001976a914b150de59803b725f5fa2f4d7a0bf3f18634cac6d88ac1febe13c2c0000001976a9147b0d312b007dbac5cf6c25da50c01308d298e2a088ac6e0000000200000001a8bece298933f7d7773bae388151e06688f9e957e94bf8428f08a89f6dfef61f010000006a47304402200d74399557d7929473898ec1c45834bb1ce0f451f3301942402815e0ee484cc702201def63f882b0df06dccd25c1aafbbf0261859015599580890d8d2967fc730252012102ce26d9af10b21cdf964a3367932c4c35cb2e9b14583d3238689c38534e0dcae3fdffffff0200e40b54020000001976a91417e1a6f5891cdf50fd3c3255b8af17090f50479988ac3e06d6e8290000001976a914fb6e3b2576e6c6808db9eba588c0cc9ec437311488ac6e00000002000000012fa0f0f07217b3b2ca60171451b0df629b9b4ff7c9d1198a59af25220e77ab5f010000006a47304402205e44ae41859ec518ed88e0c9c7e6d7eff85f547a6aa5a306414e0a133ed83bb702204c289bca66748fbfe050867a2fcb59ec9bdb90d80d8b14939bfd976267bbedc001210207f06c4afa55071c72e93cc1b5fbabdc330b9cc06035844172596294240b07dcfdffffff0200e40b54020000001976a91438849a498d6608cbfa0f55d9c790d2eb1f972f0d88ac5d21ca94270000001976a9140c1a1690fb3d9165a750a6266432a66fc0c5b38688ac6e0000000200000001d3165ce9f148deb7f0c340ad6809fd6398089f088c5dffbbd26181d3e4674bcb010000006a473044022047381a776ce63400b08802686ba4338378109510380704d3b7a4c771b2a6d88e022006fe3df187eccba6c6c2933ee2eb43eaca8f7772635feeb8fc6cf087bcb6df4f012103c8d0d4f65b1d528ed85c4accd6c2e270191da7f7185bf9aa816be700209f9c77fdffffff027c3cbe40250000001976a9148d8b7e4b19ba89f27c61c538592c5aaad7e2e7c388ac00e40b54020000001976a9142cb487fa9bf1c89ac92a435d0eaf2c321469d2e188ac6e0000000200000001c94d74a198225a1f54c85f71f822d31fd1cc4b8f0411bf3b3fd8335e18bd9fe2000000006a47304402206ac86a6ff28c5f8c1e3156d102779139690f52c33b9a92b52df0376ebca9557802203103bf5d7fda27c710232d039e4cd1a1686cfa6cdf389e2ebbb50709310fbdd5012102ddbb6656b12b62546b311c1a1c30d3f0efb91da065fb4f0feee980baf04734a3fdffffff029b57b2ec220000001976a9147320bd04e41e10890c099ea41b861e0d38de549488ac00e40b54020000001976a9140adf6cbb0eaf625de09892d81fb7030f88aae93a88ac6e00000002000000010db5ad7f4a989b28dc1323c082bb8c532c3c76b2004c63855b2992e57dc10401000000006a47304402202512bf190e5303ac60c53f74b42f53aa48632dc4bea6102119451b52b194b16002206698634b0d440c0ea1dfe3ccf5041aabfa029cf4fd04b931efdebcfccab23fc70121034ffca23d3fb7043c20359ebfa2d45d3689663abde27c1837f0d8d4705d68998bfdffffff0200e40b54020000001976a914751297168f98a2f5d5652dfa12f26c74f633841988acba72a698200000001976a91476dc7a44ef7d79f5226ff7e0a53fe6f45954432d88ac6e00000002000000013f398349c085947f24fe279eaa5d1dda3a140c9a603205877a3ee15974e80dfb010000006a47304402200b71d6c1e05e5fb8459a010a773ef22256273bf55cd7bdc2dbf32730927a83cb022017c4e4a7d36153dbe10aeede5fb5c64620de4e9bc3c06ab8efc1837b80a9c10c01210299ad22636cd20660a32034a411cb725967728b69c9f85c40162d1f535b59a058fdffffff02d98d9a441e0000001976a9146a98fc0829619134881fd09ac56b2824417dd4f688ac00e40b54020000001976a91401606793146b3188debe78f5d46924c9465d764688ac6e0000000200000001d1bdd181075a3a231b39bd1a285fd322c468bed70349bbed346e675be5ba3ca6000000006a473044022047810101ee4c6ee53024145437ead095652042e00e4cbddeb816e715ada489a502206126540ea95339a48b6f51ba932366037899c22f07fcf7897c0a941aa7f10a5e0121026d59e75da10191bbb497d98be226fb19d63bb99ae0adac11d2acb32db66b1ffcfdffffff0200e40b54020000001976a91426bdb2343e1b3b6774a3d18305108edca85879e188acf8a88ef01b0000001976a914b2bc2d81924343e59e691abac36ec9c2e0375a9788ac6e000000"),
    };
    stream >> TX_WITH_WITNESS(block);

    std::set<Txid> txids;

    // Last txn in block.
    Txid txhash1{TxidFromString("0x59a50fe568f76afb68309ced3a8e2ae3b5a6da9bb8f2cbc5336e20ab8d84bea5")};

    // Second txn in block.
    Txid txhash2{TxidFromString("0x1ff6fe6d9fa8088f42f84be957e9f98866e0518138ae3b77d7f7338929cebea8")};

    txids.insert(txhash1);
    txids.insert(txhash2);

    CMerkleBlock merkleBlock(block, txids);

    BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());

    // vMatchedTxn is only used when bloom filter is specified.
    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 0U);

    std::vector<uint256> vMatched;
    std::vector<unsigned int> vIndex;

    BOOST_CHECK_EQUAL(merkleBlock.txn.ExtractMatches(vMatched, vIndex).GetHex(), block.hashMerkleRoot.GetHex());
    BOOST_CHECK_EQUAL(vMatched.size(), 2U);

    // Ordered by occurrence in depth-first tree traversal.
    BOOST_CHECK_EQUAL(vMatched[0].ToString(), txhash2.ToString());
    BOOST_CHECK_EQUAL(vIndex[0], 1U);

    BOOST_CHECK_EQUAL(vMatched[1].ToString(), txhash1.ToString());
    BOOST_CHECK_EQUAL(vIndex[1], 8U);
}


/**
 * Create a CMerkleBlock using a list of txids which will not be found in the
 * given block.
 */
BOOST_AUTO_TEST_CASE(merkleblock_construct_from_txids_not_found)
{
    // Random test block (0x414e96f90a60b9dd125f0ef9a04b67f1335e9f8045d1ba1db8b52361f9ec1d89)
    // With 9 txes
    CBlock block;
    DataStream stream{
        ParseHex("00000020ca688cca33b7d47b2feb61cb604a7bc7e2175652a885238b325d252f7106157f2c60e574599c862709c165908c8a6afbbbdfb1653085837095165e1a86f7d9956a163166ffff7f206f00000000000000000000003468c93f1039dbf9d6563b99cc73e507cc7f91fb259416dee74ea423bbaccfef09020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff03016f00ffffffff0208d7ed902e0000001976a9143d43ee6b2e01b439908f07c5715ed0572668aa9088ac0000000000000000266a24aa21a9edd314965bd33edd008d7ed626972346997c8639606093d184e4f94ef392cc26160120000000000000000000000000000000000000000000000000000000000000000000000000020000000166b14613cbeb27f64f417966a736c8e737aab2d408aefafe491945e89ada8f2e000000006a473044022078eec3a2293496b5fe663c9944a032e2ef68d167ef3d02b95b266bf2834da274022043557f40c337276b775d37d6275a5412cbeb0234e054ffa9ce430920766b69c2012103dd447ceed1fbc5ba778b74171d990883857af70982a51405b1cb1ab63ed0831bfdffffff0200e40b54020000001976a914b150de59803b725f5fa2f4d7a0bf3f18634cac6d88ac1febe13c2c0000001976a9147b0d312b007dbac5cf6c25da50c01308d298e2a088ac6e0000000200000001a8bece298933f7d7773bae388151e06688f9e957e94bf8428f08a89f6dfef61f010000006a47304402200d74399557d7929473898ec1c45834bb1ce0f451f3301942402815e0ee484cc702201def63f882b0df06dccd25c1aafbbf0261859015599580890d8d2967fc730252012102ce26d9af10b21cdf964a3367932c4c35cb2e9b14583d3238689c38534e0dcae3fdffffff0200e40b54020000001976a91417e1a6f5891cdf50fd3c3255b8af17090f50479988ac3e06d6e8290000001976a914fb6e3b2576e6c6808db9eba588c0cc9ec437311488ac6e00000002000000012fa0f0f07217b3b2ca60171451b0df629b9b4ff7c9d1198a59af25220e77ab5f010000006a47304402205e44ae41859ec518ed88e0c9c7e6d7eff85f547a6aa5a306414e0a133ed83bb702204c289bca66748fbfe050867a2fcb59ec9bdb90d80d8b14939bfd976267bbedc001210207f06c4afa55071c72e93cc1b5fbabdc330b9cc06035844172596294240b07dcfdffffff0200e40b54020000001976a91438849a498d6608cbfa0f55d9c790d2eb1f972f0d88ac5d21ca94270000001976a9140c1a1690fb3d9165a750a6266432a66fc0c5b38688ac6e0000000200000001d3165ce9f148deb7f0c340ad6809fd6398089f088c5dffbbd26181d3e4674bcb010000006a473044022047381a776ce63400b08802686ba4338378109510380704d3b7a4c771b2a6d88e022006fe3df187eccba6c6c2933ee2eb43eaca8f7772635feeb8fc6cf087bcb6df4f012103c8d0d4f65b1d528ed85c4accd6c2e270191da7f7185bf9aa816be700209f9c77fdffffff027c3cbe40250000001976a9148d8b7e4b19ba89f27c61c538592c5aaad7e2e7c388ac00e40b54020000001976a9142cb487fa9bf1c89ac92a435d0eaf2c321469d2e188ac6e0000000200000001c94d74a198225a1f54c85f71f822d31fd1cc4b8f0411bf3b3fd8335e18bd9fe2000000006a47304402206ac86a6ff28c5f8c1e3156d102779139690f52c33b9a92b52df0376ebca9557802203103bf5d7fda27c710232d039e4cd1a1686cfa6cdf389e2ebbb50709310fbdd5012102ddbb6656b12b62546b311c1a1c30d3f0efb91da065fb4f0feee980baf04734a3fdffffff029b57b2ec220000001976a9147320bd04e41e10890c099ea41b861e0d38de549488ac00e40b54020000001976a9140adf6cbb0eaf625de09892d81fb7030f88aae93a88ac6e00000002000000010db5ad7f4a989b28dc1323c082bb8c532c3c76b2004c63855b2992e57dc10401000000006a47304402202512bf190e5303ac60c53f74b42f53aa48632dc4bea6102119451b52b194b16002206698634b0d440c0ea1dfe3ccf5041aabfa029cf4fd04b931efdebcfccab23fc70121034ffca23d3fb7043c20359ebfa2d45d3689663abde27c1837f0d8d4705d68998bfdffffff0200e40b54020000001976a914751297168f98a2f5d5652dfa12f26c74f633841988acba72a698200000001976a91476dc7a44ef7d79f5226ff7e0a53fe6f45954432d88ac6e00000002000000013f398349c085947f24fe279eaa5d1dda3a140c9a603205877a3ee15974e80dfb010000006a47304402200b71d6c1e05e5fb8459a010a773ef22256273bf55cd7bdc2dbf32730927a83cb022017c4e4a7d36153dbe10aeede5fb5c64620de4e9bc3c06ab8efc1837b80a9c10c01210299ad22636cd20660a32034a411cb725967728b69c9f85c40162d1f535b59a058fdffffff02d98d9a441e0000001976a9146a98fc0829619134881fd09ac56b2824417dd4f688ac00e40b54020000001976a91401606793146b3188debe78f5d46924c9465d764688ac6e0000000200000001d1bdd181075a3a231b39bd1a285fd322c468bed70349bbed346e675be5ba3ca6000000006a473044022047810101ee4c6ee53024145437ead095652042e00e4cbddeb816e715ada489a502206126540ea95339a48b6f51ba932366037899c22f07fcf7897c0a941aa7f10a5e0121026d59e75da10191bbb497d98be226fb19d63bb99ae0adac11d2acb32db66b1ffcfdffffff0200e40b54020000001976a91426bdb2343e1b3b6774a3d18305108edca85879e188acf8a88ef01b0000001976a914b2bc2d81924343e59e691abac36ec9c2e0375a9788ac6e000000"),
    };
    stream >> TX_WITH_WITNESS(block);

    std::set<Txid> txids2;
    txids2.insert(TxidFromString("0xdf817e70aa678b4c750126649f9fbe4f34a3bb643017967dce2850995a4904ef"));
    CMerkleBlock merkleBlock(block, txids2);

    BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());
    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 0U);

    std::vector<uint256> vMatched;
    std::vector<unsigned int> vIndex;

    BOOST_CHECK_EQUAL(merkleBlock.txn.ExtractMatches(vMatched, vIndex).GetHex(), block.hashMerkleRoot.GetHex());
    BOOST_CHECK_EQUAL(vMatched.size(), 0U);
    BOOST_CHECK_EQUAL(vIndex.size(), 0U);
}

BOOST_AUTO_TEST_SUITE_END()
